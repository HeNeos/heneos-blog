1:"$Sreact.fragment"
2:I[8173,["953","static/chunks/app/blog/%5Bslug%5D/page-4374ee6693381f28.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
8:I[6213,[],"ViewportBoundary"]
a:I[6213,[],"MetadataBoundary"]
c:I[4835,[],""]
:HL["/heneos-blog/_next/static/css/10c5481d6c776747.css","style"]
:HL["/heneos-blog/_next/static/css/54df1266182b2fb1.css","style"]
:HL["/heneos-blog/_next/static/css/5eacd01f773eed7f.css","style"]
0:{"P":null,"b":"5mhfYB6IPGqLIuSIKiUsX","p":"/heneos-blog","c":["","blog","2025-01-18-cloud-ascii-art"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","2025-01-18-cloud-ascii-art","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/heneos-blog/_next/static/css/10c5481d6c776747.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/heneos-blog/_next/static/css/54df1266182b2fb1.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"bg-zinc-950 text-zinc-100 min-h-screen","children":[["$","header",null,{"className":"p-6 border-b border-zinc-800","children":["$","div",null,{"className":"max-w-6xl mx-auto","children":[["$","div",null,{"className":"mb-10","children":[["$","h1",null,{"className":"text-4xl font-bold tracking-tighter mb-4 text-center","children":"HeNeos blog"}],["$","p",null,{"className":"text-center text-zinc-500 mb-2","children":"Josue H. @ JP Morgan Chase"}],["$","p",null,{"className":"text-center text-zinc-600","children":"HeNeos"}]]}],["$","div",null,{"className":"flex justify-center space-x-12 mb-4","children":[["$","$L2",null,{"href":"https://github.com/HeNeos","target":"_blank","className":"text-zinc-500 hover:text-zinc-300","children":"GH"}],["$","$L2",null,{"href":"https://www.linkedin.com/in/heneos","target":"_blank","className":"text-zinc-500 hover:text-zinc-300","children":"LI"}],["$","$L2",null,{"href":"mailto:he.neos@outlook.com","className":"text-zinc-500 hover:text-zinc-300","children":"EM"}]]}],["$","div",null,{"className":"flex flex-col sm:flex-row justify-center gap-4 border-t border-zinc-800 pt-4","children":[["$","$L2",null,{"href":"/","children":["$","div",null,{"className":"cursor-pointer hover:bg-blue-400 hover:text-zinc-900 transition-colors px-4 py-2 rounded-md flex items-center justify-between","children":[["$","span",null,{"children":"Home"}],["$","span",null,{"className":"text-zinc-500 ml-6","children":"ha"}]]}]}],["$","$L2",null,{"href":"/blog","children":["$","div",null,{"className":"cursor-pointer hover:bg-blue-400 hover:text-zinc-900 transition-colors px-4 py-2 rounded-md flex items-center justify-between","children":[["$","span",null,{"children":"Blog"}],["$","span",null,{"className":"text-zinc-500 ml-6","children":"hb"}]]}]}],["$","$L2",null,{"href":"/about","children":["$","div",null,{"className":"cursor-pointer hover:bg-blue-400 hover:text-zinc-900 transition-colors px-4 py-2 rounded-md flex items-center justify-between","children":[["$","span",null,{"children":"About"}],["$","span",null,{"className":"text-zinc-500 ml-6","children":"hc"}]]}]}]]}]]}]}],["$","main",null,{"className":"container mx-auto px-4 py-8 max-w-6xl","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"$undefined",[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"border-t border-zinc-800 py-6 mt-12","children":["$","div",null,{"className":"container mx-auto px-4 relative h-full","children":["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-2 gap-8","children":[["$","div",null,{"children":[["$","h3",null,{"className":"text-lg font-semibold text-white mb-4","children":"Connect"}],["$","div",null,{"className":"flex space-x-4","children":[["$","a",null,{"href":"https://github.com/HeNeos","target":"_blank","rel":"noopener noreferrer","className":"text-slate-400 hover:text-white transition-colors","children":"GitHub"}],["$","a",null,{"href":"https://x.com/_HeNeos","target":"_blank","rel":"noopener noreferrer","className":"text-slate-400 hover:text-white transition-colors","children":"X"}],["$","a",null,{"href":"https://codeforces.com/profile/HeNeos","target":"_blank","rel":"noopener noreferrer","className":"text-slate-400 hover:text-white transition-colors","children":"Codeforces"}],["$","a",null,{"href":"https://codeforces.com/profile/Ptolemy_314","target":"_blank","rel":"noopener noreferrer","className":"text-slate-400 hover:text-white transition-colors","children":"Codeforces old"}]]}]]}],["$","div",null,{"children":[["$","h4",null,{"className":"text-lg font-semibold text-white mb-4","children":"Project Euler"}],["$","a",null,{"href":"https://projecteuler.net/profile/HeNeos.png","target":"_blank","rel":"noopener noreferrer","children":["$","img",null,{"src":"https://projecteuler.net/profile/HeNeos.png","alt":"Project Euler Profile","className":" h-auto max-h-10 rounded-sm object-contain"}]}]]}]]}]}]}]]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","2025-01-18-cloud-ascii-art","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","div",null,{"className":"max-w-5xl mx-auto","children":[["$","$L2",null,{"href":"/blog","className":"text-zinc-500 hover:text-blue-400 mb-6 inline-block","children":"‚Üê Back to all posts"}],["$","article",null,{"className":"border border-zinc-800 rounded-lg p-8 bg-zinc-900/30","children":[["$","header",null,{"className":"mb-8 border-b border-zinc-800 pb-6","children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Ascii Art"}],["$","p",null,{"className":"text-zinc-500 mb-4 font-mono","children":"January 18, 2025"}],["$","div",null,{"className":"flex gap-2 flex-wrap","children":[["$","span","cloud",{"className":"inline-block bg-zinc-800 text-zinc-300 px-2 py-1 text-xs rounded-sm","children":["#","cloud"]}],["$","span","image-processing",{"className":"inline-block bg-zinc-800 text-zinc-300 px-2 py-1 text-xs rounded-sm","children":["#","image-processing"]}]]}]]}],["$","div",null,{"className":"gap-4 mt-8","children":["$","div",null,{"className":"prose prose-invert prose-zinc max-w-none","children":[["$","p","p-0",{"className":"text-zinc-300 my-4 leading-relaxed","children":"I've been inactive on writing for a long time, many thins happened. I'm also now AWS SysOps certified, it went better than I thought. Anyway, let's start with the topic of this entry."}],"\n",["$","p","p-1",{"className":"text-zinc-300 my-4 leading-relaxed","children":"I've been working for several months on ascii art, just as a quick introduction to it, ascii art is the process to represent images with ascii characters. You may be wondering how is that possible?, if you think about images, you will remember that it's compound of pixels, a lot of them, if instead of pixels we replace them with ascii characters, would it work?... Yes, but no."}],"\n",["$","p","p-2",{"className":"text-zinc-300 my-4 leading-relaxed","children":"It's the basic idea, but we are gonna deep dive more into this, otherwise I had not been doing that for several months."}],"\n",["$","div","img-0",{"className":"image-container my-8","children":["$","img",null,{"src":"https://raw.githubusercontent.com/HeNeos/heneos.github.io/master/assets/img/cloud/ascii_art/ascii_art_ascii.png","alt":"ASCII Art","width":"100%","height":"auto","className":"object-contain mx-auto"}]}],"\n",["$","h2","h2-0",{"className":"text-2xl font-bold mt-8 mb-4 text-zinc-100 border-b border-zinc-800 pb-2","children":"Basic ascii art"}],"\n",["$","p","p-3",{"className":"text-zinc-300 my-4 leading-relaxed","children":"Let's start with the basic idea, and then go further from it. If we replace every pixel with a character, the first question is to which character?, how is possible to map every possible pixel (24 bits) to a character (8 bits)?"}],"\n",["$","p","p-4",{"className":"text-zinc-300 my-4 leading-relaxed","children":["Let's think for a moment only for a grayscale image, then instead there are only 256 possible pixels, which is much less than ",["$","span","span-0",{"className":"katex","children":[["$","span","span-0",{"className":"katex-mathml","children":["$","math","math-0",{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics","semantics-0",{"children":[["$","mrow","mrow-0",{"children":["$","msup","msup-0",{"children":[["$","mn","mn-0",{"children":"2"}],["$","mn","mn-1",{"children":"24"}]]}]}],["$","annotation","annotation-0",{"encoding":"application/x-tex","children":"2^{24}"}]]}]}]}],["$","span","span-1",{"className":"katex-html","aria-hidden":"true","children":["$","span","span-0",{"className":"base","children":[["$","span","span-0",{"className":"strut","style":{"height":"0.8141em"}}],["$","span","span-1",{"className":"mord","children":[["$","span","span-0",{"className":"mord","children":"2"}],["$","span","span-1",{"className":"msupsub","children":["$","span","span-0",{"className":"vlist-t","children":["$","span","span-0",{"className":"vlist-r","children":["$","span","span-0",{"className":"vlist","style":{"height":"0.8141em"},"children":["$","span","span-0",{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span","span-0",{"className":"pstrut","style":{"height":"2.7em"}}],["$","span","span-1",{"className":"sizing reset-size6 size3 mtight","children":["$","span","span-0",{"className":"mord mtight","children":["$","span","span-0",{"className":"mord mtight","children":"24"}]}]}]]}]}]}]}]}]]}]]}]}]]}],". Now, how can we assign a character to a pixel value? Well, not all ascii characters covers the screen in the same ",["$","em","em-0",{"children":"intensity"}],", for example, compare this character ",["$","code","code-0",{"className":"undefined font-mono","children":"-"}]," with ",["$","code","code-1",{"className":"undefined font-mono","children":"@"}],", so it makes sense so to assign the characters that less cover the screen with the lowest values in the grayscale (the darker colors) and the brighter pixels with something like ",["$","code","code-2",{"className":"undefined font-mono","children":"@"}],"."]}],"\n",["$","p","p-5",{"className":"text-zinc-300 my-4 leading-relaxed","children":"We have another problem here, despite there are 256 ascii characters, not all of them are printable. However, this is easy to solve, just define ranges where each printable ascii character should map to a grayscale value, you can decide if make this scale linear or not."}],"\n",["$","p","p-6",{"className":"text-zinc-300 my-4 leading-relaxed","children":"And that's it, now you have a way to put ascii characters instead of pixels, so we are done, right? Not really, it's true that now we replaced every character with a pixel and that should work but, a printed ascii character doesn't have the dimensions of a pixel, it depends about the fontsize but in almost all cases, the aspect ratio for a character is not 1:1, it means if you replace every pixel with a character you will see a deformed image, to solve this, easy way is to first modify aspect ratio of the original image, according to your font size, in most cases doubling the width should be enough as a good approximation."}],"\n",["$","p","p-7",{"className":"text-zinc-300 my-4 leading-relaxed","children":"We have another problem, our output image resolution is too big, why? Well, since we discussed before, a character doesn't have the same size as a pixel and depending of your font size it could be bigger, imagine for example if your font takes 12 pixels as height and 8 and width, if you did the rescale to preserve the original aspect ratio of the image then now your output image will be 144 times bigger than before. To solve this issue, you can just downscale the image, reduce the original size so that the output image despite of being multiplied by 144 is still manageable."}],"\n",["$","p","p-8",{"className":"text-zinc-300 my-4 leading-relaxed","children":["We've now solved how to do the ascii art for grayscale images, but not all images are grayscale, most of them are in color, so what can we do? Easy, convert them to grayscale, or use this formula ",["$","code","code-0",{"className":"undefined font-mono","children":"0.299 Red + 0.587 Green + 0.114 Blue"}],"."]}],"\n",["$","p","p-9",{"className":"text-zinc-300 my-4 leading-relaxed","children":"And that's it, it covers a basic ascii art that you can find around the internet."}],"\n",["$","div","img-1",{"className":"image-container my-8","children":["$","img",null,{"src":"https://raw.githubusercontent.com/HeNeos/heneos.github.io/master/assets/img/cloud/ascii_art/heneos_ascii.png","alt":"","width":"80%","height":"auto","className":"object-contain mx-auto"}]}],"\n",["$","h2","h2-1",{"className":"text-2xl font-bold mt-8 mb-4 text-zinc-100 border-b border-zinc-800 pb-2","children":"Colored ascii art"}],"\n",["$","p","p-10",{"className":"text-zinc-300 my-4 leading-relaxed","children":["At this point, you're able to have ascii art from any image preserving the aspect ratio and the size, but you notice an issue, most of the details are lost because even when ascii characters can show the ",["$","code","code-0",{"className":"undefined font-mono","children":"luminance"}]," of the original image, they're not able to show the ",["$","code","code-1",{"className":"undefined font-mono","children":"color"}],", so how to solve this?"]}],"\n",["$","p","p-11",{"className":"text-zinc-300 my-4 leading-relaxed","children":"Instead of printing the ascii character on a text based display, you can print it on a canvas or a created image, then you will have an image with tons of ascii characters that represents your original image. This concept will help us later when we wanna do videos."}],"\n",["$","p","p-12",{"className":"text-zinc-300 my-4 leading-relaxed","children":"In a canvas, you can select to which color you want to print your ascii character, since you already know the height and width of your font, you also know how to moves over the canvas."}],"\n",["$","div","img-2",{"className":"image-container my-8","children":["$","img",null,{"src":"https://raw.githubusercontent.com/HeNeos/heneos.github.io/master/assets/img/cloud/ascii_art/jaden_ascii.png","alt":"","width":"80%","height":"auto","className":"object-contain mx-auto"}]}],"\n",["$","h2","h2-2",{"className":"text-2xl font-bold mt-8 mb-4 text-zinc-100 border-b border-zinc-800 pb-2","children":"Video processing"}],"\n",["$","p","p-13",{"className":"text-zinc-300 my-4 leading-relaxed","children":"Now, instead of processing an image, we're going to process a video, this step is fairly simple since this could be summarized as just applying the same idea to all frames and then merge them again."}],"\n",["$","p","p-14",{"className":"text-zinc-300 my-4 leading-relaxed","children":"It's good but take into account two things, a video is commonly compressed to save storage with a lower bitrate. Merging all created images with our ascii art will create a heavy video if you don't apply the appropiate compression."}],"\n",["$","p","p-15",{"className":"text-zinc-300 my-4 leading-relaxed","children":"For all of this stuff related with videos, I recommend to use ffmpeg and create your own small set of functions that call to ffmpeg, you're gonna need it to resize the video, to split/merge frames and to extract/add the audio."}],"\n",["$","h2","h2-3",{"className":"text-2xl font-bold mt-8 mb-4 text-zinc-100 border-b border-zinc-800 pb-2","children":"Dithering"}],"\n",["$","p","p-16",{"className":"text-zinc-300 my-4 leading-relaxed","children":"You've probably notices on your videos those ugly color bands. It's just disgusting... it's happening because our character space is not as big as the original pixel one. Hopefully, there are already solutions for that and one of them is applying a noise, which is dithering."}],"\n",["$","p","p-17",{"className":"text-zinc-300 my-4 leading-relaxed","children":"There are many dithering algorithms and you can use whatever you want, I implemented like 5 of them if you wanna try but there are not so noticeable differences, so just use whatever you want."}],"\n",["$","div","img-3",{"className":"image-container my-8","children":["$","img",null,{"src":"https://raw.githubusercontent.com/HeNeos/heneos.github.io/master/assets/img/cloud/ascii_art/david_ascii.png","alt":"","width":"100%","height":"auto","className":"object-contain mx-auto"}]}],"\n",["$","h2","h2-4",{"className":"text-2xl font-bold mt-8 mb-4 text-zinc-100 border-b border-zinc-800 pb-2","children":"Edge detection"}],"\n",["$","p","p-18",{"className":"text-zinc-300 my-4 leading-relaxed","children":"At this point, you already have a nice ascii art generator, but there is a still a thing missing. Edges."}],"\n",["$","p","p-19",{"className":"text-zinc-300 my-4 leading-relaxed","children":["It's nice that our ascii art can capture color and luminance, but it's not telling use about edges, of course originally pixels also didn't show us them but it's because the original image has a higher resolution than the distorted for the ascii processing, so we need to use some of our ascii characters as edges, sadly we don't have many, only: ",["$","code","code-0",{"className":"undefined font-mono","children":"_/|\\"}],"."]}],"\n",["$","p","p-20",{"className":"text-zinc-300 my-4 leading-relaxed","children":"Now the question is, how can we detect edges? Well that's an old and popular topic, there are many filters to extract those edges, use difference of gaussians and sobel filter to capture it, with that now you can get the angle of each pixel and then map the angles to our for ascii characters. Replace those characters with the initial ascii art and that's it."}],"\n",["$","h2","h2-5",{"className":"text-2xl font-bold mt-8 mb-4 text-zinc-100 border-b border-zinc-800 pb-2","children":"Further"}],"\n",["$","p","p-21",{"className":"text-zinc-300 my-4 leading-relaxed","children":"I've just explained what to do, not how to do, and that's because in the implementation is the joyness of this. Try to do the optimizations for yourself, be aware that despite python could be a good idea because of the libraries for image processing, it's really slow, it could work fast for images but you will suffer in videos."}]]}]}]]}]]}],"$undefined",[["$","link","0",{"rel":"stylesheet","href":"/heneos-blog/_next/static/css/5eacd01f773eed7f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L5",null,{"children":["$L6","$L7",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Bb9BEAniQH08GCUHOqMnn",{"children":[["$","$L8",null,{"children":"$L9"}],null]}],["$","$La",null,{"children":"$Lb"}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
9:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
6:null
7:null
b:[["$","title","0",{"children":"Ascii Art | HeNeos blog"}],["$","meta","1",{"name":"description","content":"Implement a non-naive ascii art"}]]
